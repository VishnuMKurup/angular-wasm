{"ast":null,"code":"import * as i0 from \"@angular/core\";\nclass WasmService {\n  loadWebAssemblyModule() {\n    return new Promise((resolve, reject) => {\n      fetch('assets/wasm/main.wasm') // Adjust the path based on your project structure\n      .then(response => response.arrayBuffer()).then(buffer => WebAssembly.instantiate(buffer, {})).then(obj => {\n        this.module = obj.instance.exports;\n        console.log(this.module, 'mm');\n        resolve();\n      }).catch(error => {\n        console.error('Failed to initialize WebAssembly module:', error);\n        reject(error);\n      });\n    });\n  }\n  add(a, b) {\n    // Check if module or _add function is not available\n    if (!this.module || !this.module.add) {\n      throw new Error('WebAssembly module or _add function not available.');\n    }\n    return this.module.add(a, b);\n  }\n  static #_ = this.ɵfac = function WasmService_Factory(t) {\n    return new (t || WasmService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WasmService,\n    factory: WasmService.ɵfac,\n    providedIn: 'root'\n  });\n}\nexport { WasmService };","map":{"version":3,"names":["WasmService","loadWebAssemblyModule","Promise","resolve","reject","fetch","then","response","arrayBuffer","buffer","WebAssembly","instantiate","obj","module","instance","exports","console","log","catch","error","add","a","b","Error","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/apple/Desktop/projects/angular-wasm/src/assets/wasm/wasm.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WasmService {\n  private module: any;\n\n  loadWebAssemblyModule(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      fetch('assets/wasm/main.wasm') // Adjust the path based on your project structure\n        .then(response => response.arrayBuffer())\n        .then(buffer => WebAssembly.instantiate(buffer, {}))\n        .then(obj => {\n          this.module = obj.instance.exports;\n          console.log(this.module,'mm')\n          resolve();\n        })\n        .catch(error => {\n          console.error('Failed to initialize WebAssembly module:', error);\n          reject(error);\n        });\n    });\n  }\n\n  add(a: number, b: number): number {\n    // Check if module or _add function is not available\n    if (!this.module || !this.module.add) {\n      throw new Error('WebAssembly module or _add function not available.');\n    }\n    return this.module.add(a, b);\n  }\n\n  \n}\n"],"mappings":";AAEA,MAGaA,WAAW;EAGtBC,qBAAqBA,CAAA;IACnB,OAAO,IAAIC,OAAO,CAAO,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC3CC,KAAK,CAAC,uBAAuB,CAAC,CAAC;MAAA,CAC5BC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,WAAW,EAAE,CAAC,CACxCF,IAAI,CAACG,MAAM,IAAIC,WAAW,CAACC,WAAW,CAACF,MAAM,EAAE,EAAE,CAAC,CAAC,CACnDH,IAAI,CAACM,GAAG,IAAG;QACV,IAAI,CAACC,MAAM,GAAGD,GAAG,CAACE,QAAQ,CAACC,OAAO;QAClCC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACJ,MAAM,EAAC,IAAI,CAAC;QAC7BV,OAAO,EAAE;MACX,CAAC,CAAC,CACDe,KAAK,CAACC,KAAK,IAAG;QACbH,OAAO,CAACG,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;QAChEf,MAAM,CAACe,KAAK,CAAC;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACJ;EAEAC,GAAGA,CAACC,CAAS,EAAEC,CAAS;IACtB;IACA,IAAI,CAAC,IAAI,CAACT,MAAM,IAAI,CAAC,IAAI,CAACA,MAAM,CAACO,GAAG,EAAE;MACpC,MAAM,IAAIG,KAAK,CAAC,oDAAoD,CAAC;;IAEvE,OAAO,IAAI,CAACV,MAAM,CAACO,GAAG,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B;EAAC,QAAAE,CAAA,G;qBA1BUxB,WAAW;EAAA;EAAA,QAAAyB,EAAA,G;WAAXzB,WAAW;IAAA0B,OAAA,EAAX1B,WAAW,CAAA2B,IAAA;IAAAC,UAAA,EAFV;EAAM;;SAEP5B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}